#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
"""

# -*- coding: utf-8 -*-

"""
Created on Tue Oct  5 14:31:24 2021

@author: adrien
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy as sp
from numpy.fft import fft
import seaborn

class Maregraphe:
    def __init__(self, profondeurs, temps_en_dates):
        self.profondeurs = profondeurs
        self.dates = temps_en_dates

        self.frequence_d_echantillonage = 1
        self.frequences = []
        self.indices_conserves = []
        self.hauteurs_conservees = []
        self.dates_conservees = []


def indices_pertinents(freq, fech):
    L = []
    n = len(freq)
    for i in range(n):
        if fech/2 > freq[i] > 0 and 0.1 > freq[i] > 0.01:
            L.append(i)
    return(L)

def afficher(time, Depth, numero_maregraphe, color = 'royalblue', str_echelle_tps= 's'):

    plt.plot(time, Depth, label= str(numero_maregraphe), color=color)
    plt.legend()
    plt.title("Données du marégraphe "+str(numero_maregraphe))
    plt.xlabel('temps ['+ str_echelle_tps +']')
    plt.xticks(rotation = 30)
    plt.ylabel("hauteur d'eau [m]")
    plt.show()

def trace_fourrier(Depth, fech, nom_maregraphe, color = 'royalblue'):

    Nech = len(Depth)
    fDepth = fft(Depth)/Nech
    freq = np.fft.fftfreq(Nech, fech)
    indices_conserves = indices_pertinents(freq, fech)
    freq = freq[indices_conserves]
    fDepth = fDepth[indices_conserves]
    plt.plot(freq, 100*fDepth, color = color)
    plt.title("FFT marégraphe "+str(nom_maregraphe))
    plt.xlabel('fréquences [Hz]')
    plt.ylabel("amplitude [cm]")
    plt.show()

    plt.loglog(freq, 100*np.abs(fDepth), color = color)
    plt.xlabel('fréquences [Hz]')
    plt.ylabel("amplitude [cm]")
    plt.title("FFT marégraphe "+str(nom_maregraphe))
    plt.show()

def plot_hauteurs_d_eau(hauteur_d_eau, temps_en_dates, titre, xlabel, ylabel, indice_debut = 0, indice_fin = -1 ):
    """
    plot les hauteurs d'eau selon les dates

    :param hauteur_d_eau: nd.array(n,)
    :param temps_en_dates: Pandas.Series(n,)
    """
    n = len(hauteur_d_eau[indice_debut: indice_fin])
    plt.xticks(np.arange(0, n, step = n//10), rotation = 50)
    plt.plot(temps_en_dates[indice_debut: indice_fin],hauteur_d_eau[indice_debut: indice_fin])
    plt.title(titre)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.show()

def plot_hauteurs_d_eau_par_index(hauteur_d_eau, titre, xlabel, ylabel, indice_debut = 0, indice_fin = -1):
    """
    plot les hauteurs d'eau par index

    :param hauteur_d_eau: nd.array(n,)
    :param indice_debut: int
    :param indice_fin: int
    """

    n = len(hauteur_d_eau)
    if indice_debut < 0 :
        indice_debut = n + indice_debut
    if indice_fin < 0 :
        indice_fin = n + indice_fin
    indices = np.int_(np.array([i for i in range(indice_debut, indice_fin)]))
    plt.xticks(np.arange(indice_debut, indice_fin, step = (indice_fin-indice_debut)//10), rotation = 50)
    plt.plot(indices,hauteur_d_eau[indices])
    plt.title(titre)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.show()

def CSV_to_Date_Hauteur_Temperature(path, separateur, index_max = -1):
    """
      Convertit les données brutes du marégraphe : CSV -_> np.arrays

    :param path: chemin d'accès
    :param separateur: "|" "," ou bien " " selon le fichier
    :param index_max: int, permet de ne garder que les premières données pour éviter de crash l'ordi

    return: triplet de nd.arrays(n,) : temps_en_dates, hauteur_d_eau, temperature
    """

    # CSV -> data (tableau Pandas) #
    dat = pd.read_csv(
        path,
        sep=separateur,
        names=['date', 'time', 'pressure', 'temperature'], parse_dates={'Time': ['date', 'time']},
        index_col=False)

    data = dat[1:index_max]
    temps_en_dates = data["Time"]

    # temps en s #
    data.loc[:, ('Time')] = pd.to_datetime(data["Time"])  # in ns
    data.loc[:, ('Time')] = (data.loc[:, ('Time')] - data["Time"][1]).values.astype(float) * 1e-9
    data.loc[:, ('temperature')] = data['temperature'].astype(float)
    data.loc[:, ('pressure')] = data['pressure'].astype(float)
    delta_temps_en_s = (data.loc[:, ('Time')] - data["Time"][1]).values.astype(float)

    # temperature #
    temperature = np.array(data['temperature'].astype(float))

    # conversion pression -> profondeur #
    pression = np.array(data['pressure'].astype(float))
    n = len(pression)
    pression.reshape(n, 1)
    p_atm = 10.13  # déci bar
    rho = 1
    g = 9.8
    hauteur_d_eau = (pression - p_atm * np.ones(np.shape(pression))) / rho / g  # pression en Pa

    return temps_en_dates, hauteur_d_eau, temperature


def CSV_to_Date_Hauteur_nos_donnees(path, separateur, index_max = -1, donnees_tidal_slope = False):
    """
      Convertit les données brutes du marégraphe : CSV -_> np.arrays
      ADAPTÉ AU FORMAT DE NOS DONNÉES

    :param path: chemin d'accès
    :param separateur: "|" "," ou bien " " selon le fichier
    :param index_max: int, permet de ne garder que les premières données pour éviter de crash l'ordi

    return: triplet de nd.arrays(n,) : temps_en_dates, hauteur_d_eau, temperature
    """

    # CSV -> data (tableau Pandas) #

    if not(donnees_tidal_slope):
        dat = pd.read_csv(
            path,
            sep=separateur,
            names=['Time', 'Pressure', 'Sea pressure', 'Depth'],
            index_col=False)
    else :
        dat = pd.read_csv(
            path,
            sep = separateur,
            names = ['Time', 'Pressure','Tidal slope', 'Sea pressure', 'Depth'],
            index_col = False)

    data = dat[1:index_max]
    temps_en_dates = data["Time"]

    # temps en s #
    data.loc[:, ('Time')] = pd.to_datetime(data["Time"])  # in ns
    data.loc[:, ('Time')] = (data.loc[:, ('Time')] - data["Time"][1]).values.astype(float) * 1e-9
    data.loc[:, ('Pressure')] = data['Pressure'].astype(float)
    delta_temps_en_s = (data.loc[:, ('Time')] - data["Time"][1]).values.astype(float)

    # on lit directement la profondeur #
    hauteur_d_eau = np.array(data['Depth'].astype(float))

    return temps_en_dates, hauteur_d_eau



if __name__ == """__main__""":
    seaborn.set_theme()


    run_1_2018 = False
    if run_1_2018:
        # !!! suspect !!! problème au milieu ??

        # CSV -> arrays #
        path = "maregraphes 1 et 4 (traité comme le no2)/20181008_1.TXT"
        temps_en_dates, hauteur_d_eau, temperature = \
            CSV_to_Date_Hauteur_Temperature(path, separateur = '|', index_max= -1)
        maregraphe1 = Maregraphe(profondeurs = hauteur_d_eau, temps_en_dates = temps_en_dates)

        indice_debut, indice_fin = 272000, -10000 # 4000, 180000 pour le début
        maregraphe1.indices_conserves = [i for i in range(indice_debut, indice_fin)]
        maregraphe1.hauteurs_conservees = hauteur_d_eau[indice_debut:indice_fin]
        maregraphe1.dates_conservees = temps_en_dates[indice_debut:indice_fin]
        maregraphe1.frequence_d_echantillonage = 1

        # plots #
        par_index = False
        par_dates = False
        plot_fourrier = False

        if par_index:
            # plot: hauteur d'eau VS temps (en index)
            plot_hauteurs_d_eau_par_index(hauteur_d_eau,
                                          titre="Hauteurs données par le marégraphe 1_2018",
                                          xlabel='indices', ylabel="hauteur d'eau [m]",
                                          indice_debut=indice_debut, indice_fin=indice_fin)
        if par_dates:
            # plot: hauteur d'eau VS temps (en dates)
            plot_hauteurs_d_eau(hauteur_d_eau, temps_en_dates, titre='m1 debut', xlabel='dates',
                                ylabel="hauteur d'eau [m]",
                                indice_debut=indice_debut, indice_fin=indice_fin)
        if plot_fourrier:
            trace_fourrier(maregraphe1.hauteurs_conservees, maregraphe1.frequence_d_echantillonage, 'm1 debut')


    run_2_2018 = False
    if run_2_2018:

        # CSV -> arrays #
        path = "maregraphes 1 et 4 (traité comme le no2)/20181008_2.TXT"
        temps_en_dates, hauteur_d_eau, temperature = \
            CSV_to_Date_Hauteur_Temperature(path, separateur = ';', index_max= -1 )
        maregraphe2 = Maregraphe(profondeurs=hauteur_d_eau, temps_en_dates=temps_en_dates)

        indice_debut, indice_fin = 4000, 340000
        maregraphe2.indices_conserves = [i for i in range(indice_debut, indice_fin)]
        maregraphe2.hauteurs_conservees = hauteur_d_eau[indice_debut:indice_fin]
        maregraphe2.dates_conservees = temps_en_dates[indice_debut:indice_fin]
        maregraphe2.frequence_d_echantillonage = 1

        # plots #
        par_index = False
        par_dates = False
        plot_fourrier = False

        if par_index:
            # plot: hauteur d'eau VS temps (en index)
            plot_hauteurs_d_eau_par_index(hauteur_d_eau,
                                          titre="Hauteurs données par le marégraphe 2_2018" ,
                                          xlabel='indices', ylabel="hauteur d'eau [m]",
                                          indice_debut=indice_debut, indice_fin=indice_fin)
        if par_dates:
            # plot: hauteur d'eau VS temps (en dates)
            plot_hauteurs_d_eau(hauteur_d_eau, temps_en_dates, titre='m2', xlabel='dates',
                                ylabel="hauteur d'eau [m]",
                                indice_debut=indice_debut, indice_fin=indice_fin)
        if plot_fourrier:
            trace_fourrier(maregraphe2.hauteurs_conservees, maregraphe2.frequence_d_echantillonage, 'm2')


    run_backup1 = False
    if run_backup1:
        # !!! suspect !!! problème au milieu ??

        # CSV -> arrays #
        path = "maregraphes 1 et 4 (traité comme le no2)/20181008_backup_1.TXT"
        temps_en_dates, hauteur_d_eau, temperature = \
            CSV_to_Date_Hauteur_Temperature(path, separateur = ' ', index_max= -1 )
        maregraphe3 = Maregraphe(profondeurs=hauteur_d_eau, temps_en_dates=temps_en_dates)

        indice_debut, indice_fin =  272000, -10000 # 4000, 180000 pour le début
        maregraphe3.indices_conserves = [i for i in range(indice_debut, indice_fin)]
        maregraphe3.hauteurs_conservees = hauteur_d_eau[indice_debut:indice_fin]
        maregraphe3.dates_conservees = temps_en_dates[indice_debut:indice_fin]
        maregraphe3.frequence_d_echantillonage = 1

        # plots #
        par_index = False
        par_dates = False
        plot_fourrier = False

        if par_index:
            # plot: hauteur d'eau VS temps (en index)
            plot_hauteurs_d_eau_par_index(hauteur_d_eau,
                                          titre=("Hauteurs données par le marégraphe backup1_2018"),
                                          xlabel='indices', ylabel="hauteur d'eau [m]",
                                          indice_debut=indice_debut, indice_fin=indice_fin)
        if par_dates:
            # plot: hauteur d'eau VS temps (en dates)
            plot_hauteurs_d_eau(hauteur_d_eau, temps_en_dates, titre='backup1_2018', xlabel='dates',
                                ylabel="hauteur d'eau [m]",
                                indice_debut=indice_debut, indice_fin=indice_fin)
        if plot_fourrier:
            trace_fourrier(maregraphe3.hauteurs_conservees, maregraphe3.frequence_d_echantillonage, 'backup1_2018')


    # =============== données 4 : backup2 ==================

    run_backup2 = False
    if run_backup2:

        path = "maregraphes 1 et 4 (traité comme le no2)/20181008_backup_2_avec_saut_de_temps_le_8_a10h30.TXT"
        temps_en_dates, hauteur_d_eau, temperature = \
            CSV_to_Date_Hauteur_Temperature(path, separateur = ' ', index_max= -1 )
        maregraphe4 = Maregraphe(profondeurs=hauteur_d_eau, temps_en_dates=temps_en_dates)

        indice_debut, indice_fin = 4000, 340000
        maregraphe4.indices_conserves = [i for i in range(indice_debut, indice_fin)]
        maregraphe4.hauteurs_conservees = hauteur_d_eau[indice_debut:indice_fin]
        maregraphe4.dates_conservees = temps_en_dates[indice_debut:indice_fin]
        maregraphe4.frequence_d_echantillonage = 1

        # plots #
        par_index = False
        par_dates = False
        plot_fourrier = False

        if par_index:
            # plot: hauteur d'eau VS temps (en index)
            plot_hauteurs_d_eau_par_index(hauteur_d_eau,
                                          titre=("Hauteurs données par le marégraphe backup2_2018"),
                                          xlabel='indices', ylabel="hauteur d'eau [m]",
                                          indice_debut=indice_debut, indice_fin=indice_fin)
        if par_dates:
            # plot: hauteur d'eau VS temps (en dates)
            plot_hauteurs_d_eau(hauteur_d_eau, temps_en_dates, titre='m4 debut', xlabel='dates',
                                ylabel="hauteur d'eau [m]",
                                indice_debut=indice_debut, indice_fin=indice_fin)
        if plot_fourrier:
            trace_fourrier(maregraphe4.hauteurs_conservees, maregraphe4.frequence_d_echantillonage, 'm4 début')

    # =============== nos marégraphes, données prélevées au cours du premier levé ================== #

    #  maregraphe 3 partie 1 #
    run_m3_1 = False
    if run_m3_1:

        path = "nos_maregraphes/200470_20211005_1244_m3_enlever_1_data.txt"
        temps_en_dates, hauteur_d_eau = \
            CSV_to_Date_Hauteur_nos_donnees(path, separateur = ',', index_max= -1 )

        maregraphe3_debut = Maregraphe(profondeurs=hauteur_d_eau, temps_en_dates=temps_en_dates)

        indice_debut, indice_fin = 10000, -5000
        maregraphe3_debut.indices_conserves = [i for i in range(indice_debut, indice_fin)]
        maregraphe3_debut.hauteurs_conservees = hauteur_d_eau[indice_debut:indice_fin]
        maregraphe3_debut.dates_conservees = temps_en_dates[indice_debut:indice_fin]
        maregraphe3_debut.frequence_d_echantillonage = 4


        # plots #
        par_index = False
        par_dates = True
        plot_fourrier = True

        if par_index:
            # plot: hauteur d'eau VS temps (en index)
            plot_hauteurs_d_eau_par_index(hauteur_d_eau,
                                          titre=("Hauteurs données par Nos données pour le marégraphe 3"),
                                          xlabel='indices', ylabel="hauteur d'eau [m]",
                                          indice_debut=indice_debut, indice_fin=indice_fin)
        if par_dates:
            # plot: hauteur d'eau VS temps (en dates)
            plot_hauteurs_d_eau(hauteur_d_eau, temps_en_dates, titre='m3 debut', xlabel='dates',
                                ylabel="hauteur d'eau [m]",
                                indice_debut=indice_debut, indice_fin=indice_fin)
        if plot_fourrier:
            trace_fourrier(maregraphe3_debut.hauteurs_conservees, maregraphe3_debut.frequence_d_echantillonage, 'm3 debut')



    #  maregraphe 4 partie 1 #
    run_m4_1 = False
    if run_m4_1:

        path = "nos_maregraphes/200471_20211005_1302_m4_enlever_1_data.txt"
        temps_en_dates, hauteur_d_eau = \
            CSV_to_Date_Hauteur_nos_donnees(path, separateur = ',', index_max= -1 )

        maregraphe4_debut = Maregraphe(profondeurs=hauteur_d_eau, temps_en_dates=temps_en_dates)

        indice_debut, indice_fin = 7000,-2000
        maregraphe4_debut.indices_conserves = [i for i in range(indice_debut, indice_fin)]
        maregraphe4_debut.hauteurs_conservees = hauteur_d_eau[indice_debut:indice_fin]
        maregraphe4_debut.dates_conservees = temps_en_dates[indice_debut:indice_fin]
        maregraphe4_debut.frequence_d_echantillonage = 4
        
        # plots #
        par_index = True
        par_dates = True
        plot_fourrier = True

        if par_index:
            # plot: hauteur d'eau VS temps (en index)
            plot_hauteurs_d_eau_par_index(hauteur_d_eau,
                                          titre=("Hauteurs données par Nos données pour le marégraphe 4 "
                                                 + "(debut de la semaine)"),
                                          xlabel='indices', ylabel="hauteur d'eau [m]",
                                          indice_debut=indice_debut, indice_fin=indice_fin)
        if par_dates:
            # plot: hauteur d'eau VS temps (en dates)
            plot_hauteurs_d_eau(hauteur_d_eau, temps_en_dates, titre='m4 debut', xlabel='dates',
                                ylabel="hauteur d'eau [m]",
                                indice_debut=indice_debut, indice_fin=indice_fin)
        if plot_fourrier:
            trace_fourrier(maregraphe4_debut.hauteurs_conservees, maregraphe4_debut.frequence_d_echantillonage, 'm4 fin')


    #  maregraphe 5 partie 1 #

    # on a pas assez de données initialement : la fréquence d'échantillonage choisie
    # ne permet pas de détecter des seiches
    run_m5_1 = False
    if run_m5_1:

        path = "nos_maregraphes/200472_20211005_1323_m5_enlever_1_data.txt"
        temps_en_dates, hauteur_d_eau = \
            CSV_to_Date_Hauteur_nos_donnees(path, separateur = ',', index_max= -1, donnees_tidal_slope = True )
        
        indice_debut, indice_fin = 20, -1
        maregraphe5_debut = Maregraphe(profondeurs=hauteur_d_eau, temps_en_dates=temps_en_dates)
        maregraphe5_debut.indices_conserves = [i for i in range(indice_debut, indice_fin)]
        maregraphe5_debut.hauteurs_conservees = hauteur_d_eau[indice_debut:indice_fin]
        maregraphe5_debut.dates_conservees = temps_en_dates[indice_debut:indice_fin]
        maregraphe5_debut.frequence_d_echantillonage = 1/60

        # plots #
        par_index = False
        par_dates = False
        plot_fourrier = False

        if par_index:
            # plot: hauteur d'eau VS temps (en index)
            plot_hauteurs_d_eau_par_index(hauteur_d_eau,
                                          titre="Hauteurs données par Nos données pour le marégraphe 5 ",
                                          xlabel='indices', ylabel="hauteur d'eau [m]",
                                          indice_debut=indice_debut, indice_fin=indice_fin)
        if par_dates:
            # plot: hauteur d'eau VS temps (en dates)
            plot_hauteurs_d_eau(hauteur_d_eau, temps_en_dates, titre='m5 debut', xlabel='dates',
                                ylabel="hauteur d'eau [m]",
                                indice_debut=indice_debut, indice_fin=indice_fin)
        if plot_fourrier:
            trace_fourrier(maregraphe5_debut.hauteurs_conservees, maregraphe5_debut.frequence_d_echantillonage, 'm4 fin')


    # =============== nos marégraphes, totalité des données ================== #


    #  maregraphe 3 partie 2 #
    run_m3_2 = False
    if run_m3_2:

        path = "maregraphes 1 et 4 (traité comme le no2)/200470_20211008_0845_m3_fin_s1_data.txt"
        temps_en_dates, hauteur_d_eau = \
            CSV_to_Date_Hauteur_nos_donnees(path, separateur = ',', index_max= -4 )

        maregraphe3_fin = Maregraphe(profondeurs=hauteur_d_eau, temps_en_dates=temps_en_dates)

        indice_debut, indice_fin = 355000, -5000
        maregraphe3_fin.indices_conserves = [i for i in range(indice_debut, indice_fin)]
        maregraphe3_fin.hauteurs_conservees = hauteur_d_eau[indice_debut:indice_fin]
        maregraphe3_fin.dates_conservees = temps_en_dates[indice_debut:indice_fin]
        maregraphe3_fin.frequence_d_echantillonage = 4


        # plots #
        par_index = False
        par_dates = False
        plot_fourrier = False

        if par_index:
            # plot: hauteur d'eau VS temps (en index)
            plot_hauteurs_d_eau_par_index(hauteur_d_eau,
                                          titre=("Hauteurs données par Nos données pour le marégraphe 3 "
                                                 + "(restant de la semaine)"),
                                          xlabel='indices', ylabel="hauteur d'eau [m]",
                                          indice_debut=indice_debut, indice_fin=indice_fin)
        if par_dates:
            # plot: hauteur d'eau VS temps (en dates)
            plot_hauteurs_d_eau(hauteur_d_eau, temps_en_dates, titre='m3 fin', xlabel='dates',
                                ylabel="hauteur d'eau [m]",
                                indice_debut=indice_debut, indice_fin=indice_fin)
        if plot_fourrier:
            trace_fourrier(maregraphe3_fin.hauteurs_conservees, maregraphe3_fin.frequence_d_echantillonage, 'm3 fin')



    #  maregraphe 4 partie 2 #
    run_m4_2 = False
    if run_m4_2:

        path = "maregraphes 1 et 4 (traité comme le no2)/200471_20211008_0856_m4_fin_s1_data.txt"
        temps_en_dates, hauteur_d_eau = \
            CSV_to_Date_Hauteur_nos_donnees(path, separateur = ',', index_max= -1 )

        maregraphe4_fin = Maregraphe(profondeurs=hauteur_d_eau, temps_en_dates=temps_en_dates)

        indice_debut, indice_fin = 360000, -8000
        maregraphe4_fin.indices_conserves = [i for i in range(indice_debut, indice_fin)]
        maregraphe4_fin.hauteurs_conservees = hauteur_d_eau[indice_debut:indice_fin]
        maregraphe4_fin.dates_conservees = temps_en_dates[indice_debut:indice_fin]
        maregraphe4_fin.frequence_d_echantillonage = 4
        

        # plots #
        par_index = False
        par_dates = False
        plot_fourrier = False
        
        if par_index :
            # plot: hauteur d'eau VS temps (en index)
            plot_hauteurs_d_eau_par_index(hauteur_d_eau,
                                          titre=("Hauteurs données par Nos données pour le marégraphe 4 "
                                                + "(restant de la semaine)"),
                                          xlabel='indices', ylabel="hauteur d'eau [m]",
                                          indice_debut=indice_debut, indice_fin=indice_fin)
        if par_dates : 
            # plot: hauteur d'eau VS temps (en dates)
            plot_hauteurs_d_eau(hauteur_d_eau, temps_en_dates, titre= 'm4 fin', xlabel= 'dates', ylabel = "hauteur d'eau [m]",
                                indice_debut = indice_debut, indice_fin = indice_fin)
        if plot_fourrier:
            trace_fourrier(maregraphe4_fin.hauteurs_conservees, maregraphe4_fin.frequence_d_echantillonage, 'm4 fin')
